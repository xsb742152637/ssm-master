<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
    http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

    <bean id="applicationSettings"
          class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <!--是否自动登录-->
                <prop key="isAutoLogin">true</prop>
                <prop key="name">好管家</prop>
                <!-- 附件目录 -->
                <prop key="fileStorage">fileStorage</prop>

                <!--按钮大小：大型(bs-btn-lg) / 默认() / 小型(bs-btn-sm) / 迷你(bs-btn-xs) -->
                <prop key="butSize"></prop>

                <!-- 各模块主页面按钮颜色：原始(bs-btn-primary) / 默认() / 百搭(bs-btn-normal) / 暖色(bs-btn-warm) / 警告(bs-btn-danger) / 禁用(bs-btn-disabled) -->
                <prop key="butColor">bs-btn-norma</prop>

                <!-- 圆角：默认(.bs-radius-sm) / 小圆角(bs-radius-md) / 大圆角(bs-radius-lg) -->
                <prop key="radius">bs-radius-md</prop>

            </props>
        </property>
    </bean>


    <!-- 配置SpringMVC -->
    <!-- 1.开启SpringMVC注解模式 -->
    <!-- 简化配置：
        (1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter
        (2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持
    -->
    <mvc:annotation-driven />

    <!-- 2.静态资源默认servlet配置
        (1)加入对静态资源的处理：js,gif,png
        (2)允许使用"/"做整体映射
     -->
    <mvc:default-servlet-handler/>

    <!-- 3.配置jsp 显示ViewResolver -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/" />
        <property name="suffix" value=".jsp" />
    </bean>

    <!-- 4.扫描controller相关的bean -->
    <context:component-scan base-package="controller" />


    <!-- 使用ehcache缓存  -->
    <!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManager" ref="ehCacheManager" />
    </bean>

    <!-- 配置ehcache的对象EhCacheManager -->
    <bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <!-- 注入ehcache核心配置文件的位置 Default is "ehcache.xml" in the root of the class
            path, or if not found, "ehcache-failsafe.xml" in the EhCache jar (default
            EhCache initialization). 可以不配置，默认找类路径下的ehcache.xml -->
        <property name="configLocation" value="classpath:ehcache.xml"/>
        <property name="shared" value="true"></property> <!-- 这里是关键！！！没有必错  -->
    </bean>
    <!-- Spring整合Ehache -->
    <!-- Spring的平台缓存管理器 -->
    <bean id="springCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <!-- 注入ehcache的对象 -->
        <property name="cacheManager" ref="ehCacheManager"></property>
    </bean>
    <!-- spring的缓存注解驱动 -->
    <cache:annotation-driven cache-manager="springCacheManager"/>

    <!--全局异常捕捉 -->
    <bean class="util.GlobalExceptionResolver" />

    <import resource="classpath:spring/spring-shiro.xml"/>
    <import resource="classpath:spring/spring-mybatis.xml"/>
    <import resource="classpath:spring/spring-quartz.xml"/>

    <!-- 产生shiro核心控制器的方式，使用cglib生成代理 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
</beans>